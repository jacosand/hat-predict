#!/usr/bin/env python

"""
Script to apply the trained machine learning model to predict the free energy
barriers for a list of hydrogen atom transfer (HAT) reactions whose chemical
descriptors are in a .csv descriptors file (default: descriptors.csv).
Writes predictions to another .csv file (default: barriers.csv).  If the
input file contains ground-truth free energy barriers, these barriers are
also written to the output file.

Run from the command line:
python get_barriers.py [arguments] /path/to/directory/with/descriptors.csv

For possible arguments, see argument parser in __main__ section or run:
python get_barriers.py -h
"""

import os
import argparse
import pandas as pd
import xgboost


def split_columns(df):
    """
    Function which reads a Pandas dataframe whose rows correspond to hydrogen
    atom transfer reactions, and splits the columns into input descriptors (x),
    ground-truth outputs (y), filenames of the reaction species (rxns), and
    groups (group) used for group k-fold cross-validation.

    The outputs of this function are suitable for use in scikit-learn machine
    learning models.

    Arguments:

        - df: Pandas dataframe whose rows correspond to hydrogen atom transfer
              reactions

    Returns:

        - x: Pandas dataframe whose rows correspond to input descriptors for
             hydrogen atom transfer reactions

        - y: Pandas series whose entries correspond to the ground-truth output
             for hydrogen atom transfer reactions, in this case the
             ground-truth free energy barrier computed via DFT.
             NaN if function is called in testing mode.

        - rxns: Pandas dataframe whose rows correspond to the filenames of the
                reaction species for hydrogen atom transfer reactions.

        - group: Pandas series whose entries correspond to the groups used in
                 group k-fold cross-validation.  Groups are assigned according to
                 the identity of the substrate undergoing H abstraction (i.e. B-H).
    """

    rxn_files = ['reaction',
                 'AR_smiles', 'AR_atom', 'AH_smiles', 'AH_atom',
                 'BR_smiles', 'BR_atom', 'BH_smiles', 'BH_atom']

    rxns = df[rxn_files]
    y = df['DGdd_true']
    group = df['BH_smiles']

    x = (df
         .drop(columns=rxn_files)
         .drop(columns=['DGdd_true'])
         )

    return x, y, rxns, group


def write_reaction_barriers(in_file, out_file, model_file):
    """
    This function reads a .csv in_file whose rows contain the chemical descriptors
    for individual HAT reactions, uses a pre-trained XGBoost model to predict the
    free energy barrier for each reaction, and saves the predicted results to a
    new .csv out_file.
    
    For compatability when being used in training, if the in_file contains
    ground-truth free energy barriers, these barriers are also written to out_file.

    Arguments:

        - in_file: path and name of the input .csv file containing the
                   chemical descriptors for the HAT reactions, as generated by
                   get_descriptors.py

        - out_file: path and name of the output .csv file to save the predicted
                    free energy barriers

        - model_file: path and name of the model .json file which contains
                      the pre-trained XGBoost model

    Returns:

        Nothing, but saves the ML-predicted free energy barriers to the .csv
        out_file.
    """

    # Read and preprocess test data set
    data_test = pd.read_csv(in_file)
    x_test, y_test, rxns_test, group_test = split_columns(data_test)

    # Import trained XGBoost model and run it on test data set
    xgb = xgboost.Booster(model_file=model_file)
    y_test_pred = pd.Series(xgb.predict(xgboost.DMatrix(x_test)))

    # Create Pandas dataframe storing all free energy barriers
    barriers = (rxns_test
                .assign(**{'DGdd_pred': y_test_pred,
                           'DGdd_true': y_test})
                )

    # Save ML-predicted free energy barriers to .csv file
    barriers.to_csv(out_file, index=False, float_format='{:.2f}'.format)


if __name__ == "__main__":
    
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Applies the trained machine \
        learning model to predict the free energy barrier for each reaction \
        whose chemical descriptors are in the .csv descriptors file (default: \
        descriptors.csv), and writes the predictions to another .csv file \
        (default: barriers.csv).")

    parser.add_argument(
        "dir",
        help="path to directory which contains .csv file containing chemical \
              input descriptors",
    )

    parser.add_argument(
        "-i", "--inp",
        help="base filename of .csv file (without extension) in which chemical \
              input descriptors are stored",
        default='descriptors',
    )

    parser.add_argument(
        "-o", "--out",
        help="base filename of .csv file (without extension) in which ML \
              predicted barriers are to be written",
        default='barriers',
    )

    args = parser.parse_args()

    if not os.path.isdir(args.dir):
        raise FileNotFoundError(
            'Dataset directory %s does not exist!' % args.dir)

    dir_descriptors_csv = os.path.join(args.dir, args.inp + '.csv')
    dir_barriers_csv = os.path.join(args.dir, args.out + '.csv')
    dir_model_json = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'xgb_model.json')

    write_reaction_barriers(in_file = dir_descriptors_csv,
                            out_file = dir_barriers_csv,
                            model_file = dir_model_json)